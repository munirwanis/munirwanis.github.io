<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content"><channel><title>Munir Xavier Wanis</title><description>Here you will find posts about the things I think are worth sharing.</description><link>https://munirwanis.github.io</link><language>en</language><lastBuildDate>Tue, 27 Apr 2021 16:24:35 -0300</lastBuildDate><pubDate>Tue, 27 Apr 2021 16:24:35 -0300</pubDate><ttl>250</ttl><atom:link href="https://munirwanis.github.io/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://munirwanis.github.io/blog/2020/vaccine</guid><title>Introducing Vaccine, a dependency injection framework</title><description>Simple dependency injection library using Swift property wrappers.</description><link>https://munirwanis.github.io/blog/2020/vaccine</link><pubDate>Tue, 22 Sep 2020 16:00:00 -0300</pubDate><content:encoded><![CDATA[<h1>Introducing Vaccine, a dependency injection framework</h1><p>Since the introduction of property wrappers it became possible to do some great things with Swift, and the one that I mostly like is dependency injections.</p><p>I made this little code for my personal projects so it could be easier to test the behaviours of my services and view models without needing to pass the dependencies as arguments on their initializers.</p><p>This <a href="https://github.com/munirwanis/vaccineexample">sample app</a> was made with the intention of showing how simple it can be to inject mocked implementations and make the most out of the unit tests.</p><h2>About the sample application</h2><p>The app makes a request to <a href="https://api.chucknorris.io">chucknorris.io</a> API and bring a random joke to the main screen.</p><p>If the user taps the refresh button, a loading animation occurs and another joke is loaded.</p><figure>
    <picture>
        <img src="https://munirwanis.github.io/images/blog/2020/random-joke-example.png" alt="Random Joke Example">
    </picture>
    <figcaption>The main screen of the app</figcaption>
</figure><p>It is basically an <code>UIViewController</code> that makes calls to a <code>ViewModel</code> that also has a dependency to a <code>Service</code> that makes API calls.</p><p>So... If I wanted to make this testable ideally I should create a <code>Protocol</code> for my service and my view model, because then my view controller would use a reference to the view model protocol, and my view model a reference to my service protocol.</p><pre><code><span class="splashcomment">// Service protocol</span>
<span class="splashkeyword">protocol</span> ChuckNorrisServicing {
    <span class="splashkeyword">func</span> getRandomJoke(callback: <span class="splashkeyword">@escaping</span> (<span class="splashtype">Result</span>&lt;<span class="splashtype">ChuckNorrisResponse</span>, <span class="splashtype">Error</span>&gt;) -&gt; <span class="splashtype">Void</span>)
}

<span class="splashcomment">// ViewModel protocol</span>
<span class="splashkeyword">protocol</span> JokeViewModeling {
    <span class="splashkeyword">func</span> getRandomJoke(callback: <span class="splashkeyword">@escaping</span> (<span class="splashtype">Result</span>&lt;<span class="splashtype">JokeModel</span>, <span class="splashtype">Error</span>&gt;) -&gt; <span class="splashtype">Void</span>)
}
</code></pre><h2>Implementing without the framework</h2><p>Without the framework normally we would make initializers passing the default value and inside the tests we overwrite it by passing the mocked class.</p><pre><code><span class="splashkeyword">final class</span> JokeViewModel: <span class="splashtype">JokeViewModeling</span> {
    <span class="splashkeyword">private let</span> service: <span class="splashtype">ChuckNorrisServicing</span>
    
    <span class="splashkeyword">init</span>(service: <span class="splashtype">ChuckNorrisServicing</span> = <span class="splashtype">ChuckNorrisService</span>()) {
        <span class="splashkeyword">self</span>.<span class="splashproperty">service</span> = service
    }

    <span class="splashcomment">// ViewModel implementation...</span>
}
</code></pre><p>And with the <code>ViewController</code> we have a little problem, if I'm making a <code>UIViewController</code> with nibs or storyboards I can't call the initializer directly. For simplicity in this case I'm instantiating the ViewModel directly on the variable.</p><p>There are quite a few problems when doing that, the most common one is to forget that the variable exists when we're making tests and don't overwrite it! If someone else grab that code to make changes it's not so clear why it was implemented like that either.</p><pre><code><span class="splashkeyword">class</span> ViewController: <span class="splashtype">UIViewController</span> {
    <span class="splashkeyword">var</span> viewModel: <span class="splashtype">JokeViewModeling</span> = <span class="splashtype">JokeViewModel</span>()

    <span class="splashcomment">// ViewController implementation...</span>
}
</code></pre><h2>Using Vaccine</h2><p>The same result could be achieved by using Vaccine's property wrapper <code>@Inject</code>. Then the code for our ViewModel and ViewController would look like that:</p><pre><code><span class="splashkeyword">import</span> Vaccine

<span class="splashkeyword">final class</span> JokeViewModel: <span class="splashtype">JokeViewModeling</span> {
    <span class="splashkeyword">@Inject</span>(<span class="splashtype">ChuckNorrisServicing</span>.<span class="splashkeyword">self</span>) <span class="splashkeyword">private var</span> service

    <span class="splashcomment">// ViewModel implementation...</span>
}

<span class="splashkeyword">class</span> ViewController: <span class="splashtype">UIViewController</span> {
    <span class="splashkeyword">@Inject</span>(<span class="splashtype">JokeViewModeling</span>.<span class="splashkeyword">self</span>) <span class="splashkeyword">private var</span> viewModel
 
    <span class="splashcomment">// ViewController implementation...</span>
}
</code></pre><p>Although we are declaring the properties as <code>var</code>'s and not <code>let</code>'s, they can't be overwritten after being initialized because inside the property wrapper they are constants. Property wrappers need to be declared as <code>var</code>'s since they are intended to wrap the current value and do some logic behind it.</p><p>One of the coolest things is that we can set those variables on <code>UIViewController</code>'s and not bother to implement those nib/storyboards initializers! ðŸ˜…</p><p>We should register our dependencies on the starting point of our application, the <code>AppDelegate</code>. If dependencies are not defined, the application will crash and inform you which classes you forgot to register.</p><pre><code><span class="splashkeyword">import</span> Vaccine

<span class="splashkeyword">@main
class</span> AppDelegate: <span class="splashtype">UIResponder</span>, <span class="splashtype">UIApplicationDelegate</span> {

    <span class="splashkeyword">func</span> application(<span class="splashkeyword">_</span> application: <span class="splashtype">UIApplication</span>, didFinishLaunchingWithOptions launchOptions: [<span class="splashtype">UIApplication</span>.<span class="splashtype">LaunchOptionsKey</span>: <span class="splashtype">Any</span>]?) -&gt; <span class="splashtype">Bool</span> {
        <span class="splashtype">Vaccine</span>.<span class="splashcall">setCure</span>(for: <span class="splashtype">ChuckNorrisServicing</span>.<span class="splashkeyword">self</span>, with: <span class="splashtype">ChuckNorrisService</span>())
        <span class="splashtype">Vaccine</span>.<span class="splashcall">setCure</span>(for: <span class="splashtype">JokeViewModeling</span>.<span class="splashkeyword">self</span>, with: <span class="splashtype">JokeViewModel</span>())
        
        <span class="splashkeyword">return true</span>
    }
}
</code></pre><h2>Testing</h2><p>Now that we are using <code>Vaccine</code> we can easily set our mock class to test the ViewModel behaviour.</p><pre><code><span class="splashcomment">// Service mock class</span>
<span class="splashkeyword">class</span> ServiceMock: <span class="splashtype">ChuckNorrisServicing</span> {
    <span class="splashkeyword">var</span> expectedJoke: <span class="splashtype">ChuckNorrisResponse</span>?
    <span class="splashkeyword">var</span> expectedError: <span class="splashtype">Error</span>?
    
    <span class="splashkeyword">func</span> getRandomJoke(callback: <span class="splashkeyword">@escaping</span> (<span class="splashtype">Result</span>&lt;<span class="splashtype">ChuckNorrisResponse</span>, <span class="splashtype">Error</span>&gt;) -&gt; <span class="splashtype">Void</span>) {
        <span class="splashkeyword">if let</span> joke = expectedJoke {
            <span class="splashcall">callback</span>(.<span class="splashcall">success</span>(joke))
        }
        
        <span class="splashkeyword">if let</span> error = expectedError {
            <span class="splashcall">callback</span>(.<span class="splashcall">failure</span>(error))
        }
    }
}
</code></pre><p>Here is how the tests will work:</p><pre><code><span class="splashkeyword">import</span> XCTest
<span class="splashkeyword">@testable import</span> VaccineExample
<span class="splashkeyword">import</span> Vaccine

<span class="splashkeyword">class</span> VaccineExampleTests: <span class="splashtype">XCTestCase</span> {

    <span class="splashkeyword">private var</span> serviceMock: <span class="splashtype">ServiceMock</span>!
    
    <span class="splashkeyword">override func</span> setUpWithError() <span class="splashkeyword">throws</span> {
        serviceMock = <span class="splashtype">ServiceMock</span>()
        <span class="splashtype">Vaccine</span>.<span class="splashcall">setCure</span>(for: <span class="splashtype">ChuckNorrisServicing</span>.<span class="splashkeyword">self</span>, with: <span class="splashkeyword">self</span>.<span class="splashproperty">serviceMock</span>)
    }

    <span class="splashkeyword">override func</span> tearDownWithError() <span class="splashkeyword">throws</span> {
        serviceMock = <span class="splashkeyword">nil</span>
    }

    <span class="splashkeyword">func</span> testViewModelSuccess() <span class="splashkeyword">throws</span> {
        <span class="splashkeyword">let</span> response = <span class="splashtype">ChuckNorrisResponse</span>(iconUrl: <span class="splashstring">""</span>, id: <span class="splashstring">""</span>, url: <span class="splashstring">""</span>, value: <span class="splashstring">"My name is Chuck Norris"</span>)
        serviceMock.<span class="splashproperty">expectedJoke</span> = response
        <span class="splashkeyword">let</span> testExpectation = <span class="splashcall">expectation</span>(description: <span class="splashstring">"Request ends"</span>)
        
        <span class="splashtype">JokeViewModel</span>().<span class="splashcall">getRandomJoke</span> { result <span class="splashkeyword">in
            defer</span> { testExpectation.<span class="splashcall">fulfill</span>() }
            <span class="splashkeyword">switch</span> result {
            <span class="splashkeyword">case</span> .<span class="splashdotAccess">success</span>(<span class="splashkeyword">let</span> model):
                <span class="splashcall">XCTAssertTrue</span>(model.<span class="splashproperty">joke</span> == response.<span class="splashproperty">value</span>)
            <span class="splashkeyword">case</span> .<span class="splashdotAccess">failure</span>(<span class="splashkeyword">let</span> error):
                <span class="splashtype">XCTFail</span>(<span class="splashstring">"Test failed with error:</span> \(error.<span class="splashproperty">localizedDescription</span>)<span class="splashstring">"</span>)
            }
        }
        
        <span class="splashcall">wait</span>(for: [testExpectation], timeout: <span class="splashnumber">10.0</span>)
    }
    
    <span class="splashkeyword">func</span> testViewModelError() <span class="splashkeyword">throws</span> {
        serviceMock.<span class="splashproperty">expectedError</span> = <span class="splashtype">URLError</span>(.<span class="splashdotAccess">unknown</span>)
        <span class="splashkeyword">let</span> testExpectation = <span class="splashcall">expectation</span>(description: <span class="splashstring">"Request ends"</span>)
        
        <span class="splashtype">JokeViewModel</span>().<span class="splashcall">getRandomJoke</span> { result <span class="splashkeyword">in
            defer</span> { testExpectation.<span class="splashcall">fulfill</span>() }
            <span class="splashkeyword">switch</span> result {
            <span class="splashkeyword">case</span> .<span class="splashdotAccess">success</span>:
                <span class="splashtype">XCTFail</span>(<span class="splashstring">"Test should fail"</span>)
            <span class="splashkeyword">case</span> .<span class="splashdotAccess">failure</span>(<span class="splashkeyword">let</span> error):
                <span class="splashcall">XCTAssertEqual</span>(error <span class="splashkeyword">as</span>! <span class="splashtype">URLError</span>, <span class="splashtype">URLError</span>(.<span class="splashdotAccess">unknown</span>))
            }
        }
        
        <span class="splashcall">wait</span>(for: [testExpectation], timeout: <span class="splashnumber">10.0</span>)
    }
}
</code></pre><h2>Wrap up</h2><p>And that's it! With <code>Vaccine</code> you can also set your <a href="https://github.com/munirwanis/Vaccine#register-dependencies">dependencies as singletons</a> and/or do more complex stuff by calling <code>setCure</code> with closures!</p><p>Check out <a href="https://github.com/munirwanis/Vaccine">Vaccine</a>, pull requests are very welcome! ðŸ˜ƒ</p>]]></content:encoded></item><item><guid isPermaLink="true">https://munirwanis.github.io/blog/2020/wwdc20-spritekit-swiftui</guid><title>Build interactions using SpriteKit and SwiftUI</title><description>Use SpriteKit and SwiftUI to implement interesting interactions between both APIs</description><link>https://munirwanis.github.io/blog/2020/wwdc20-spritekit-swiftui</link><pubDate>Fri, 26 Jun 2020 01:00:00 -0300</pubDate><content:encoded><![CDATA[<h1>Build interactions using SpriteKit and SwiftUI</h1><p>WWDC20 is blowing our minds this week with a lot of great new things and I'm particularly stuned with this new feature in SwiftUI: <code>SpriteView</code>. Now you can embed SpriteKit views in SwiftUI in a very simple way, you take your <code>SKScene</code> and pass it as an argument on <code>SpriteView</code> just like that:</p><pre><code><span class="splashkeyword">import</span> SwiftUI
<span class="splashkeyword">import</span> SpriteKit

<span class="splashkeyword">class</span> GameScene: <span class="splashtype">SKScene</span> {
    <span class="splashcomment">// Game code here</span>
}

<span class="splashkeyword">struct</span> ContentView: <span class="splashtype">View</span> {
    <span class="splashkeyword">var</span> body: <span class="splashkeyword">some</span> <span class="splashtype">View</span> {
        <span class="splashtype">SpriteView</span>(scene: <span class="splashtype">GameScene</span>(size: <span class="splashtype">CGSize</span>(width: <span class="splashnumber">300</span>, height: <span class="splashnumber">400</span>)))
            .<span class="splashcall">frame</span>(width: <span class="splashnumber">300</span>, height: <span class="splashnumber">400</span>)
    }
}
</code></pre><p>It's recommended to use the same width/height as the GameScene, you can ignore it but have in mind that the scene will stretch to maintain its size.</p><p>With this feature we now have interesting possibilities, for example, we can have a game controller styled view below the scene that sends commands to the player in the scene.</p><p>I made a simple scene which the player is just a square 16 by 16 so we could move it with an old style keyboard arrow keys in the SwiftUI view. You can check the full code <a href="https://github.com/munirwanis/swiftui-spritekit">here, at my github repository</a> to see the full thing, the code will only work on iOS 14+ and Xcode 12+, though.</p><p>Since the buttons will work to change the player's direction I made a simple <code>enum</code> called <code>PlayerDirection</code> that will contain five actions (up, down, left, right and stop) and a property called <em>velocity</em> that will return a <code>CGVector</code> containing the correct velocity for the player.</p><pre><code><span class="splashkeyword">enum</span> PlayerDirection: <span class="splashtype">String</span> {
    <span class="splashkeyword">case</span> up, down, left, right, stop
    
    <span class="splashkeyword">var</span> velocity: <span class="splashtype">CGVector</span> {
        <span class="splashkeyword">switch self</span> {
        <span class="splashkeyword">case</span> .<span class="splashdotAccess">up</span>: <span class="splashkeyword">return</span> .<span class="splashkeyword">init</span>(dx: <span class="splashnumber">0</span>, dy: <span class="splashnumber">100</span>)
        <span class="splashkeyword">case</span> .<span class="splashdotAccess">down</span>: <span class="splashkeyword">return</span> .<span class="splashkeyword">init</span>(dx: <span class="splashnumber">0</span>, dy: -<span class="splashnumber">100</span>)
        <span class="splashkeyword">case</span> .<span class="splashdotAccess">left</span>: <span class="splashkeyword">return</span> .<span class="splashkeyword">init</span>(dx: -<span class="splashnumber">100</span>, dy: <span class="splashnumber">0</span>)
        <span class="splashkeyword">case</span> .<span class="splashdotAccess">right</span>: <span class="splashkeyword">return</span> .<span class="splashkeyword">init</span>(dx: <span class="splashnumber">100</span>, dy: <span class="splashnumber">0</span>)
        <span class="splashkeyword">case</span> .<span class="splashdotAccess">stop</span>: <span class="splashkeyword">return</span> .<span class="splashkeyword">init</span>(dx: <span class="splashnumber">0</span>, dy: <span class="splashnumber">0</span>)
        }
    }
}
</code></pre><p>Now we need to change our <code>GameScene</code> so it can receive the player velocity from outside, we will use the <code>@Binding</code> property so every time the user clicks on a button at <code>ContentView</code> it will automatically update the <code>GameScene</code>.</p><pre><code><span class="splashkeyword">class</span> GameScene: <span class="splashtype">SKScene</span> {
    <span class="splashcomment">// ...</span>
    <span class="splashkeyword">@Binding var</span> currentDirection: <span class="splashtype">PlayerDirection</span>

    <span class="splashcomment">// ...</span>
    <span class="splashkeyword">init</span>(<span class="splashkeyword">_</span> direction: <span class="splashtype">Binding</span>&lt;<span class="splashtype">PlayerDirection</span>&gt;) {
        _currentDirection = direction
        <span class="splashkeyword">super</span>.<span class="splashkeyword">init</span>(size: <span class="splashtype">CGSize</span>(width: <span class="splashnumber">414</span>, height: <span class="splashnumber">896</span>)) <span class="splashcomment">// It's fixed to match scaled down iPhone resolutions for the sake of simplicity</span>
        <span class="splashkeyword">self</span>.<span class="splashproperty">scaleMode</span> = .<span class="splashdotAccess">fill</span>
    }
    
    <span class="splashkeyword">required init</span>?(coder aDecoder: <span class="splashtype">NSCoder</span>) {
        _currentDirection = .<span class="splashcall">constant</span>(.<span class="splashdotAccess">up</span>)
        <span class="splashkeyword">super</span>.<span class="splashkeyword">init</span>(coder: aDecoder)
    }
}
</code></pre><p>Great! We can now go to our <code>ContentView</code> and add the button logic! First we will add a <code>@State</code> property to the <code>View</code> containing a default value <code>.stop</code> so the player only starts moving when the user taps a button.</p><pre><code><span class="splashkeyword">struct</span> ContentView: <span class="splashtype">View</span> {
    <span class="splashkeyword">@State private var</span> currentDirection = <span class="splashtype">PlayerDirection</span>.<span class="splashproperty">stop</span>
    
    <span class="splashkeyword">var</span> body: <span class="splashkeyword">some</span> <span class="splashtype">View</span> {
        <span class="splashtype">Text</span>(<span class="splashstring">"Hello World!"</span>)
    }
}
</code></pre><p>Now we will create a function that will take care of creating a button inside the <code>View</code>, we want to approach the arrow keys of old keyboards, just like that:</p><figure>
    <picture>
        <img src="https://munirwanis.github.io/images/blog/2020/arrow-keys-example.png" alt="Arrow keys example">
    </picture>
    <figcaption>Good old arrow keys!</figcaption>
</figure><p>Below the <code>body</code> property add this:</p><pre><code><span class="splashkeyword">func</span> directionalButton(<span class="splashkeyword">_</span> direction: <span class="splashtype">PlayerDirection</span>) -&gt; <span class="splashkeyword">some</span> <span class="splashtype">View</span> {
    <span class="splashtype">VStack</span> {
        <span class="splashtype">Button</span>(action: { <span class="splashkeyword">self</span>.<span class="splashproperty">currentDirection</span> = direction }, label: {
            <span class="splashtype">Image</span>(systemName: <span class="splashstring">"arrow.</span>\(direction.<span class="splashproperty">rawValue</span>)<span class="splashstring">"</span>)
                .<span class="splashcall">frame</span>(width: <span class="splashnumber">50</span>, height: <span class="splashnumber">50</span>, alignment: .<span class="splashdotAccess">center</span>)
                .<span class="splashcall">foregroundColor</span>(.<span class="splashdotAccess">black</span>)
                .<span class="splashcall">background</span>(<span class="splashtype">Color</span>.<span class="splashproperty">white</span>.<span class="splashcall">opacity</span>(<span class="splashnumber">0.6</span>))
        })
        .<span class="splashcall">clipShape</span>(<span class="splashtype">RoundedRectangle</span>(cornerRadius: <span class="splashnumber">10</span>, style: .<span class="splashdotAccess">continuous</span>))
        .<span class="splashcall">shadow</span>(color: <span class="splashtype">Color</span>.<span class="splashproperty">black</span>.<span class="splashcall">opacity</span>(<span class="splashnumber">0.2</span>), radius: <span class="splashnumber">10</span>, x: <span class="splashnumber">10</span>, y: <span class="splashnumber">10</span>)
        .<span class="splashcall">shadow</span>(color: <span class="splashtype">Color</span>.<span class="splashproperty">white</span>.<span class="splashcall">opacity</span>(<span class="splashnumber">0.7</span>), radius: <span class="splashnumber">10</span>, x: -<span class="splashnumber">5</span>, y: -<span class="splashnumber">5</span>)
    }
}
</code></pre><p>For the <code>View</code> itself we will give the visual of an old gray computer, so let's put some <code>LinearGradient</code> for the background:</p><pre><code><span class="splashkeyword">struct</span> ContentView: <span class="splashtype">View</span> {
    <span class="splashkeyword">@State private var</span> currentDirection = <span class="splashtype">PlayerDirection</span>.<span class="splashproperty">stop</span>
    
    <span class="splashkeyword">var</span> body: <span class="splashkeyword">some</span> <span class="splashtype">View</span> {
        <span class="splashtype">ZStack</span> {
            <span class="splashtype">LinearGradient</span>(gradient: <span class="splashtype">Gradient</span>(colors: [<span class="splashtype">Color</span>.<span class="splashproperty">gray</span>, <span class="splashtype">Color</span>.<span class="splashproperty">gray</span>.<span class="splashcall">opacity</span>(<span class="splashnumber">0.8</span>), <span class="splashtype">Color</span>.<span class="splashproperty">gray</span>]),
                           startPoint: .<span class="splashdotAccess">top</span>,
                           endPoint: .<span class="splashdotAccess">bottom</span>)
                .<span class="splashcall">edgesIgnoringSafeArea</span>(.<span class="splashdotAccess">all</span>)
        }
    }
}
</code></pre><figure>
    <picture>
        <img src="https://munirwanis.github.io/images/blog/2020/simulator-gray-linear-example.png" alt="Background with Linear Gradient">
    </picture>
    <figcaption>Using linear gradients</figcaption>
</figure><p>Cool, we still have to add the <code>GameScene</code> and the arrow keys, so let's start with the scene first, put this below the <code>LinearGradient</code>:</p><pre><code><span class="splashtype">VStack</span> {
    <span class="splashtype">SpriteView</span>(scene: <span class="splashtype">GameScene</span>($currentDirection))
        .<span class="splashcall">clipShape</span>(<span class="splashtype">RoundedRectangle</span>(cornerRadius: <span class="splashnumber">10</span>, style: .<span class="splashdotAccess">continuous</span>)) <span class="splashcomment">// Round all the views! :P</span>
        .<span class="splashcall">padding</span>(<span class="splashnumber">50</span>)
}
</code></pre><figure>
    <picture>
        <img src="https://munirwanis.github.io/images/blog/2020/simulator-game-scene.png" alt="GameScene inside SwiftUI View">
    </picture>
    <figcaption>The result is the scene inside the SwiftUI View</figcaption>
</figure><p>Now we just need to add the arrow keys to the View so we can finally tap on the buttons and see the player moving! Add this code below the <code>SpriteView</code>:</p><pre><code><span class="splashtype">VStack</span>(spacing: <span class="splashnumber">10</span>) {
    <span class="splashtype">HStack</span> {
        <span class="splashcomment">// Add those spaces to force the button to be in the middle and conforms to the three buttons below</span>
        <span class="splashtype">Spacer</span>()
        <span class="splashcall">directionalButton</span>(.<span class="splashdotAccess">up</span>)
        <span class="splashtype">Spacer</span>()
    }
    <span class="splashtype">HStack</span> {
        <span class="splashcall">directionalButton</span>(.<span class="splashdotAccess">left</span>)
        <span class="splashcall">directionalButton</span>(.<span class="splashdotAccess">down</span>)
        <span class="splashcall">directionalButton</span>(.<span class="splashdotAccess">right</span>)
    }
}
.<span class="splashcall">padding</span>(.<span class="splashdotAccess">all</span>, <span class="splashnumber">10</span>)
</code></pre><p>And that's it! Here is the code in action:</p><figure>
    <picture>
        <img src="https://munirwanis.github.io/images/blog/2020/spritekit-swiftui-action.gif" alt="Game in action">
    </picture>
    <figcaption>Nice! Now we just need to add more things so the game can look interesting! ðŸ˜…</figcaption>
</figure><p>And that's it... This feature opens a lot of possibilities, imagine an adventure game that uses the inventory and action buttons as a <code>SwiftUI</code> view with all the cool animations and accessibility features way simpler to use.</p><p>The full code is available here: <a href="https://github.com/munirwanis/swiftui-spritekit">swiftui-spritekit</a>, including the game logic so you can see how the velocity is implemented inside the scene.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://munirwanis.github.io/blog/2020/swiftui-statusbar-color</guid><title>SwiftUI status bar background color bug</title><description>SwiftUI and status bar background color</description><link>https://munirwanis.github.io/blog/2020/swiftui-statusbar-color</link><pubDate>Sat, 20 Jun 2020 11:30:00 -0300</pubDate><content:encoded><![CDATA[<h1>SwiftUI status bar background color bug</h1><p>Recently when I released <a href="https://apps.apple.com/br/app/live-tracker/id1514023371?l=en">Live Tracker</a> app people started to report a bug about the status bar being all white.</p><figure>
    <picture>
        <img src="https://munirwanis.github.io/images/blog/2020/statusbar-bug.jpeg" alt="Device bug example">
    </picture>
    <figcaption>Live Tracker status bar bug on iOS 13.2.3</figcaption>
</figure><p>The expected behaviour should be a red background color like the <code>NavigationView</code>, on iOS 13.5 it looked just fine but on previous versions it was acting buggy like that. So, to get it working as expected I had to use a <code>ZStack</code> to put a <code>Color</code> view ignoring the top safe area, the code is simple and will look like this:</p><pre><code><span class="splashkeyword">struct</span> ContentView: <span class="splashtype">View</span> {
    <span class="splashkeyword">var</span> body: <span class="splashkeyword">some</span> <span class="splashtype">View</span> {
        <span class="splashtype">ZStack</span> {
            <span class="splashtype">Color</span>.<span class="splashproperty">red</span>.<span class="splashcall">edgesIgnoringSafeArea</span>(.<span class="splashdotAccess">top</span>)

            <span class="splashtype">NavigationView</span> {
                <span class="splashtype">Text</span>(<span class="splashstring">"Hello World!"</span>)
            }
        }
    }
}
</code></pre><p>That's it! Now it should be showing the desired color on your status bar. It looks kinda hacky and although Apple fixed it on newer versions it's still necessary to use it on older versions.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://munirwanis.github.io/blog/2020/first-post</guid><title>Hello World!</title><description>Marking my first post</description><link>https://munirwanis.github.io/blog/2020/first-post</link><pubDate>Sat, 20 Jun 2020 09:30:00 -0300</pubDate><content:encoded><![CDATA[<h1>Hello World!</h1><p>I'm trying out <a href="https://github.com/JohnSundell/Publish">Publish</a> by John Sundell and thought it would be cool to have a static website to write about my adventures with coding things.</p><p>Maybe some of the solutions I find along the way will help others too. So why not sharing them? ðŸ˜Š</p>]]></content:encoded></item></channel></rss>